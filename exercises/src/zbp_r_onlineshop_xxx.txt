CLASS lsc_zr_onlineshop_xxx DEFINITION INHERITING FROM cl_abap_behavior_saver.

  PROTECTED SECTION.

    METHODS save_modified REDEFINITION.

ENDCLASS.

CLASS lsc_zr_onlineshop_xxx IMPLEMENTATION.

  METHOD save_modified.
    DATA online_shop   TYPE STANDARD TABLE OF zaonlineshop_XXX.
    DATA lr_descr_struc TYPE REF TO data.
    DATA lo_structdescr TYPE REF TO cl_abap_structdescr.
    DATA r_online_shop_old TYPE zr_onlineshop_XXX.
    IF create-onlineshop IS NOT INITIAL.
      online_shop = CORRESPONDING #( create-onlineshop MAPPING FROM ENTITY ).
    ENDIF.
    IF update-onlineshop IS NOT INITIAL.
      SELECT * FROM zaonlineshop_XXX
             FOR ALL ENTRIES IN @update-onlineshop
             WHERE order_uuid = @update-onlineshop-OrderUUID
             INTO TABLE @DATA(online_shop_old_t).

      CREATE DATA lr_descr_struc TYPE zr_onlineshop_XXX. " <- any type
      lo_structdescr ?= cl_abap_structdescr=>describe_by_data_ref( p_data_ref = lr_descr_struc ).
      LOOP AT update-onlineshop ASSIGNING FIELD-SYMBOL(<onlineshop_new>).
        DATA(online_shop_old) = online_shop_old_t[ order_uuid = <onlineshop_new>-OrderUUID ].
        r_online_shop_old = CORRESPONDING #( online_shop_old MAPPING TO ENTITY ).
        LOOP AT lo_structdescr->components ASSIGNING FIELD-SYMBOL(<comp>).
          ASSIGN COMPONENT <comp>-name OF STRUCTURE <onlineshop_new>-%control TO FIELD-SYMBOL(<fld_cntrl>).
          IF <fld_cntrl> IS ASSIGNED AND <fld_cntrl> = '01'.
            ASSIGN COMPONENT <comp>-name OF STRUCTURE <onlineshop_new> TO FIELD-SYMBOL(<new_value>).
            ASSIGN COMPONENT <comp>-name OF STRUCTURE r_online_shop_old TO FIELD-SYMBOL(<old_value>).
            <old_value> = <new_value>.
          ENDIF.
        ENDLOOP.
        APPEND CORRESPONDING #( r_online_shop_old MAPPING FROM ENTITY ) TO online_shop.
      ENDLOOP.
    ENDIF.

    LOOP AT online_shop ASSIGNING FIELD-SYMBOL(<online_shop>) WHERE overall_status_indicator = zbp_r_onlineshop_XXX=>c_overall_status-post.
      DATA pr_returns TYPE zif_wrap_bapi_pr_create_xx=>pr_returns.
      <online_shop>-purchase_requisition = zcl_bapi_wrap_factory_xx=>create_instance( )->create(
        EXPORTING
          pr_header        = VALUE zif_wrap_bapi_pr_create_xx=>pr_header( pr_type = 'NB' )
          pr_items         = VALUE zif_wrap_bapi_pr_create_xx=>pr_items( (
            preq_item  = '00010'
            plant      = '1710'
            acctasscat = 'U'
            currency   = <online_shop>-Currency
            deliv_date = <online_shop>-Delivery_Date
            material   = <online_shop>-order_item_id
            matl_group = 'L001'
            preq_price = <online_shop>-order_item_price
            quantity   = <online_shop>-order_item_quantity
            unit       = 'EA'
            pur_group = '001'
            purch_org = '1010'
            short_text = <online_shop>-notes
          ) )
        IMPORTING
          pr_returns    = pr_returns
      ).

      ASSERT NOT line_exists( pr_returns[ type = 'E' ] ).
      <online_shop>-purch_rqn_creation_date = cl_abap_context_info=>get_system_date(  ).
      <online_shop>-overall_status_indicator = zbp_r_onlineshop_XXX=>c_overall_status-submitted.
    ENDLOOP.

    MODIFY zaonlineshop_XXX FROM TABLE @online_shop.

    LOOP AT delete-onlineshop INTO DATA(onlineshop_delete) WHERE OrderUUID IS NOT INITIAL.
      DELETE FROM zaonlineshop_XXX WHERE order_uuid = @onlineshop_delete-OrderUUID.
      DELETE FROM zdonlineshop_XXX WHERE orderuuid = @onlineshop_delete-OrderUUID.
    ENDLOOP.

  ENDMETHOD.

ENDCLASS.

CLASS lcl_handler DEFINITION INHERITING FROM cl_abap_behavior_handler.
  PRIVATE SECTION.
    METHODS:
      get_global_authorizations FOR GLOBAL AUTHORIZATION
        IMPORTING
        REQUEST requested_authorizations FOR OnlineShop
        RESULT result,
      CalculateOrderID FOR DETERMINE ON SAVE
        IMPORTING keys FOR OnlineShop~CalculateOrderID,
      checkPurchaseRequisition FOR VALIDATE ON SAVE
        IMPORTING keys FOR OnlineShop~checkPurchaseRequisition,
      get_instance_features FOR INSTANCE FEATURES
        IMPORTING keys REQUEST requested_features FOR OnlineShop RESULT result.
ENDCLASS.

CLASS lcl_handler IMPLEMENTATION.
  METHOD get_global_authorizations.
  ENDMETHOD.
  METHOD CalculateOrderID.
    READ ENTITIES OF zr_onlineshop_XXX IN LOCAL MODE
          ENTITY OnlineShop
            FIELDS ( OrderID )
            WITH CORRESPONDING #( keys )
          RESULT DATA(OnlineOrders).

    SELECT MAX( order_id ) FROM zaonlineshop_xxx INTO @DATA(max_order_id). "active table
    SELECT SINGLE FROM zdonlineshop_xxx FIELDS MAX( orderid ) INTO @DATA(max_orderid_draft). "draft table
    IF max_orderid_draft > max_order_id.
      max_order_id = max_orderid_draft.
    ENDIF.

    "set initial values of new instances
    MODIFY ENTITIES OF zr_onlineshop_XXX IN LOCAL MODE
      ENTITY OnlineShop
        UPDATE FIELDS ( OrderID )
        WITH VALUE #( FOR order IN OnlineOrders INDEX INTO i (
                          %tky          = order-%tky
                          OrderID       = max_order_id + i
                        ) ).

  ENDMETHOD.

  METHOD checkPurchaseRequisition.

    READ ENTITIES OF zr_onlineshop_XXX IN LOCAL MODE
      ENTITY OnlineShop
        ALL FIELDS WITH
        CORRESPONDING #( keys )
      RESULT DATA(OnlineOrders).

    LOOP AT OnlineOrders INTO DATA(OnlineOrder) WHERE OverallStatusIndicator = zbp_r_onlineshop_XXX=>c_overall_status-post.
      DATA(pr_returns) = zcl_bapi_wrap_factory_xx=>create_instance( )->check(
          EXPORTING
            pr_header        = VALUE zif_wrap_bapi_pr_create_xx=>pr_header( pr_type = 'NB' )
            pr_items         = VALUE zif_wrap_bapi_pr_create_xx=>pr_items( (
              preq_item  = '00010'
              plant      = '1710'
              acctasscat = 'U'
              currency   = OnlineOrder-Currency
              deliv_date = OnlineOrder-DeliveryDate
              material   = OnlineOrder-OrderItemID
              matl_group = 'L001'
              preq_price = OnlineOrder-OrderItemPrice
              quantity   = OnlineOrder-OrderItemQuantity
              unit       = 'EA'
              pur_group = '001'
              purch_org = '1010'
              short_text = OnlineOrder-Notes
            ) )

        ).

      LOOP AT pr_returns INTO DATA(pr_return_msg) WHERE type = 'E' OR type = 'W'.
        APPEND VALUE #(
          orderuuid = OnlineOrder-OrderUUID
          %msg = new_message(
                        id        = pr_return_msg-id
                        number    = pr_return_msg-number
                        severity  = COND #( WHEN pr_return_msg-type = 'E' THEN if_abap_behv_message=>severity-error
                                            WHEN pr_return_msg-type = 'W' THEN if_abap_behv_message=>severity-warning
                                             )
                         v1 = pr_return_msg-message_v1
                         v2 = pr_return_msg-message_v2
                         v3 = pr_return_msg-message_v3
                         v4 = pr_return_msg-message_v4  )
          %element-purchaserequisition = if_abap_behv=>mk-on
           ) TO reported-onlineshop.

        IF pr_return_msg-type = 'E' OR pr_return_msg-type = 'A'.

          APPEND VALUE #(
           orderuuid = OnlineOrder-OrderUUID
           %fail = VALUE #( cause = if_abap_behv=>cause-unspecific )
          ) TO failed-onlineshop.

        ENDIF.
      ENDLOOP.
    ENDLOOP.
  ENDMETHOD.

  METHOD get_instance_features.

    READ ENTITIES OF zr_onlineshop_XXX IN LOCAL MODE
      ENTITY OnlineShop
         FIELDS (  OrderUUID OverallStatusIndicator )
         WITH CORRESPONDING #( keys )
       RESULT DATA(OnlineShops)
       FAILED failed.

    result = VALUE #( FOR OnlineShop IN OnlineShops
                       ( %tky                           = onlineshop-%tky
                         %features-%update = COND #( WHEN onlineshop-OverallStatusIndicator = zbp_r_onlineshop_xxx=>c_overall_status-submitted
                                                        THEN if_abap_behv=>fc-o-disabled
                                                        ELSE if_abap_behv=>fc-o-enabled  )
                      ) ).

  ENDMETHOD.

ENDCLASS.